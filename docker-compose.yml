version: '3.8'
services:
  emqx:
    image: 'emqx/emqx'
    container_name: 'emqx'
    restart: 'unless-stopped'
    env_file:
      - .env
    environment:
      - EMQX_NAME=emqx
      - EMQX_LOG__LEVEL=info
      - EMQX_ALLOW_ANONYMOUS=false

      - EMQX_LISTENER__SSL__EXTERNAL__KEYFILE=etc/certs/emqx.key
      - EMQX_LISTENER__SSL__EXTERNAL__CERTFILE=etc/certs/emqx.crt
      - EMQX_LISTENER__SSL__EXTERNAL__CACERTFILE=etc/certs/chain.pem

      - EMQX_LISTENER__WSS__EXTERNAL__VERIFY=verify_none
      - EMQX_LISTENER__WSS__EXTERNAL__KEYFILE=etc/certs/emqx.key
      - EMQX_LISTENER__WSS__EXTERNAL__CERTFILE=etc/certs/emqx.crt
      - EMQX_LISTENER__WSS__EXTERNAL__CACERTFILE=etc/certs/chain.pem

      - EMQX_LOADED_PLUGINS=emqx_auth_http,emqx_web_hook,emqx_management,emqx_recon,emqx_retainer,emqx_dashboard
    ports:
      - 1883:1883 # MQTT
      - 8883:8883 # MQTT/SSL
      - 8083:8083 # MQTT/WS
      - 8084:8084 # MQTT/WSS
      - 18083:18083 # Dashboard
    volumes:
      - ./emqx/plugins:/opt/emqx/etc/plugins

      - /etc/letsencrypt/live/$DOMAIN/privkey.pem:/opt/emqx/etc/certs/emqx.key
      - /etc/letsencrypt/live/$DOMAIN/fullchain.pem:/opt/emqx/etc/certs/emqx.crt
      - /etc/letsencrypt/live/$DOMAIN/chain.pem:/opt/emqx/etc/certs/chain.pem
    networks:
      - backend

  webhooks:
    tty: true
    container_name: 'webhooks'
    env_file:
      - .env
    build:
      context: ./webhooks
      dockerfile: Dockerfile
    restart: 'unless-stopped'
    volumes:
      - ./firebaseConfig.json:/app/firebaseConfig.json
    networks:
      - backend

  auth:
    tty: true
    container_name: 'auth'
    command: npm run start
    env_file:
      - .env
    build:
      context: ./auth
      dockerfile: Dockerfile
    restart: 'unless-stopped'
    volumes:
      - ./firebaseConfig.json:/app/firebaseConfig.json
    networks:
      - backend

  ota:
    tty: true
    container_name: 'ota'
    command: npm run start
    env_file:
      - .env
    build:
      context: ./ota
      dockerfile: Dockerfile
    restart: 'unless-stopped'
    volumes:
      - ./firebaseConfig.json:/app/firebaseConfig.json
    networks:
      - backend

  nginx:
    tty: true
    container_name: 'nginx'
    build:
      context: ./nginx
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - 80:80
      - 443:443
    restart: 'unless-stopped'
    volumes:
      - ./certs:/etc/ssl/nginx/certs
    networks:
      - backend

networks:
  backend:
